'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createModel;
var nop = function nop(_) {
  return undefined;
};

/**
 * Creates a SAM Model stat holds the Store tree.
 * The only way to change the data in the Store is to call `present()` on it.
 *
 * @param {Function} Business Logic Container
 * @param {Function} State to translate Store to State
 * @param {Function} [nap] Function that implements the next-action-predicate
 * @param {any} [initialStore]
 * @param {Function} enhancer
 * @returns {Model} A SAM model that lets you read the State, present data and
 * subscribe to changes.
 */
function createModel(container, state) {
  var nap = arguments.length <= 2 || arguments[2] === undefined ? nop : arguments[2];
  var initialStore = arguments[3];
  var enhancer = arguments[4];

  if (typeof enhancer !== 'undefined') {
    // TODO: Apply enhancer
    return enhancer(createModel)(container, state, nap, initialStore);
  }

  var listeners = [];
  var store = initialStore;
  var currentState = state(store);
  var currentContainer = container;
  var currentNap = nap;

  var updateState = function updateState(_) {
    // Rebuild state
    currentState = state(store);
    console.log('New state:', currentState);

    // Pub to listeners
    listeners.forEach(function (listener) {
      return listener(currentState);
    });

    // Call nap
    currentNap(currentState)(present);
  };

  function getState() {
    return currentState;
  }

  /**
   * @params {Function} listener A callback to be invoked on every preset()
   * @return {Function} A function to remove this listener.
   */
  function subscribe(listener) {
    listeners.push(listener);
    // Send current state to new listener
    // TODO: I believe ideally we should not neet to do this (Gunar)
    listener(currentState);
    return function unsubscribe() {
      var index = listeners.indexOf(listener);
      listeners.splice(index, 1);
    };
  }

  function present() {
    var dataset = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    console.log('Present:', dataset);
    store = currentContainer(_extends({}, store), dataset);
    console.log('Store after BLC: ', store);
    updateState();
  }

  function replaceStore(nextStore) {
    console.log('replaceStore', nextStore);
    store = _extends({}, nextStore);
    updateState();
  }

  function replaceContainer(nextContainer) {
    console.log('replaceContainer');
    currentContainer = nextContainer;
    updateState();
  }

  function replaceNap(nextNap) {
    console.log('replaceNap');
    currentNap = nextNap;
    updateState();
  }

  // "INIT" present to run everything once
  present();

  return {
    present: present,
    subscribe: subscribe,
    getState: getState,
    replaceStore: replaceStore,
    replaceContainer: replaceContainer,
    replaceNap: replaceNap
  };
}